#!/usr/bin/env python3
'''
获取当前系统信息
'''
import platform

def main():
    print("脚本开始执行")
    print(f"系统信息：{platform.system()},内核版本：{platform.release()}")
    print(f"python当前使用版本：{platform.python_version()}")
    print("执行完毕")

if __name__ == "__main__":
    main()

"""
执行结果显示：
脚本开始执行
系统信息：Darwin,内核版本：24.6.0
python当前使用版本：3.9.6
执行完毕
"""

# 拓展：加入cpu核心数、当前时间、主机名
#!/usr/bin/env python3
'''
获取当前系统信息
'''
import platform
# socket, os, datetime as dt
import socket, os, datetime as dtime
# socket → 取主机名、IP
# os → CPU 核数、环境变量、文件/进程操作
# datetime → 当前时间

def main():
    print("脚本开始执行")
    print(f"当前时间{dtime.datetime.now().strftime('%F %T')}") 
    # dtime.datetime.now() 拿到当前本地时间对象。
    # strftime('%F %T') 是 ISO 格式简写：  
    # %F ≡ %Y-%m-%d（2025-09-17）
    # %T ≡ %H:%M:%S（14:25:30）
    # f-string 大括号里可以放任意表达式，性能比 % 和 .format() 好。
    print(f"系统信息：{platform.system()},内核版本：{platform.release()}")
    # platform.system() 返回 'Linux'/'Windows'/'Darwin'(macOS)。  platform.release() 拿内核/发行版号，例如 5.4.0-42-generic / 10.0.19041。 
    # 注意：Windows 下 release() 是构建号，不是“Win11”这种商业名，想更友好可再用 platform.platform()
    print(f"CPU有{os.cpu_count()}核心")
    # os.cpu_count() 返回逻辑核心数（含超线程）。
    # 如果想拿“物理核心”得用 psutil.cpu_count(logical=False)，但 psutil 是三方库，这里保持零依赖。
    print(f"当前主机名为{socket.gethostname()}")
    # socket.gethostname() 读系统主机名（/etc/hostname），不依赖 DNS，离线也能用。
    # 如果想拿完全限定域名（FQDN）可用 socket.getfqdn()，可能返回 localhost.localdomain
    print(f"python当前使用版本：{platform.python_version()}")
    print("执行完毕")

if __name__ == "__main__":
    main()
